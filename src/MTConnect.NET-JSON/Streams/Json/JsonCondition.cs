// Copyright (c) 2022 TrakHound Inc., All Rights Reserved.

// This file is subject to the terms and conditions defined in
// file 'LICENSE', which is part of this source code package.

using MTConnect.Observations;
using System.Text.Json.Serialization;
using MTConnect.Observations.Output;

namespace MTConnect.Streams.Json
{
    /// <summary>
    /// An abstract XML Element. Replaced in the XML document by type(s) of Condition type Data Elements representing CONDITION category data items defined for a Device in the Device Information Model.
    /// There can be multiple types of Condition type XML Elements in a Condition container.
    /// </summary>
    public class JsonCondition : JsonObservation
    {
        /// <summary>
        /// Level of the Condition (Normal, Warning, Fault, or Unavailable)
        /// </summary>
        [JsonPropertyName("level")]
        public string Level { get; set; }

        /// <summary>
        /// The native code (usually an alpha-numeric value) generated by the controller of a piece of equipment providing a reference identifier for a condition state or alarm.
        /// This is the same information an operator or maintenance personnel would see as a reference code designating a specific type of Condition when viewed at the piece of equipment.Usually this reference code is used to point to a more detailed description of the Condition.
        /// </summary>
        [JsonPropertyName("nativeCode")]
        public string NativeCode { get; set; }

        /// <summary>
        /// If the data source assigns a severity level to a Condition, nativeSeverity is used to report that severity information to a client software application.
        /// </summary>
        [JsonPropertyName("nativeSeverity")]
        public string NativeSeverity { get; set; }

        /// <summary>
        /// Qualifies the Condition and adds context or additional clarification.
        /// This optional attribute can be used to convey information such as HIGH or LOW type Warning and Fault condition to indicate differing types of condition states
        /// </summary>
        [JsonPropertyName("qualifier")]
        public string Qualifier { get; set; }

        /// <summary>
        /// The type of statistical calculation specified for the DataItem defined in the Device Information Model that this Condition element represents.
        /// </summary>
        [JsonPropertyName("statistic")]
        public string Statistic { get; set; }


        public JsonCondition() { }

        public JsonCondition(IObservation condition)
        {
            if (condition != null)
            {
                DataItemId = condition.DataItemId;
                Timestamp = condition.Timestamp;
                Name = condition.Name;
                Sequence = condition.Sequence;
                Type = condition.Type;
                SubType = condition.SubType;
                CompositionId = condition.CompositionId;
                //if (!string.IsNullOrEmpty(condition.Message)) Result = condition.Message;

                //Level = condition.Level.ToString();
                //NativeCode = condition.NativeCode;
                //NativeSeverity = condition.NativeSeverity;
                //if (condition.Qualifier != ConditionQualifier.NOT_SPECIFIED) Qualifier = condition.Qualifier.ToString();
            }
        }

        public JsonCondition(IObservationOutput condition)
        {
            if (condition != null)
            {
                DataItemId = condition.DataItemId;
                Timestamp = condition.Timestamp;
                Name = condition.Name;
                Sequence = condition.Sequence;
                Type = condition.Type;
                SubType = condition.SubType;
                CompositionId = condition.CompositionId;
                //if (!string.IsNullOrEmpty(condition.Message)) Result = condition.Message;

                //Level = condition.Level.ToString();
                //NativeCode = condition.NativeCode;
                //NativeSeverity = condition.NativeSeverity;
                //if (condition.Qualifier != ConditionQualifier.NOT_SPECIFIED) Qualifier = condition.Qualifier.ToString();
            }
        }

        public ConditionObservation ToCondition()
        {
            var condition = new ConditionObservation();
            //condition.DataItemId = DataItemId;
            //condition.Timestamp = Timestamp;
            //condition.Name = Name;
            //condition.Sequence = Sequence;
            //condition.Category = Devices.DataItemCategory.CONDITION;
            //condition.Type = Type;
            //condition.SubType = SubType;
            //condition.CompositionId = CompositionId;
            //condition.ResetTriggered = ResetTriggered.ConvertEnum<ResetTriggered>();
            //condition.CDATA = CDATA;
            //condition.Entries = Entries;
            //condition.Count = Count.HasValue ? Count.Value : 0; ;

            //condition.Level = Level.ConvertEnum<ConditionLevel>();
            //condition.NativeCode = NativeCode;
            //condition.NativeSeverity = NativeSeverity;
            //condition.Qualifier = Qualifier.ConvertEnum<ConditionQualifier>();

            return condition;
        }
    }
}
