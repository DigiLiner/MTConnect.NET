// Copyright (c) 2022 TrakHound Inc., All Rights Reserved.

// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

using MTConnect.Streams;
using System;

namespace MTConnect.Observations
{
    /// <summary>
    /// An Information Model that describes Condition Streaming Data reported by a piece of equipment.
    /// </summary>
    public class ConditionObservation : IConditionObservation
    {
        /// <summary>
        /// The name of the Device that the Observation is associated with
        /// </summary>
        public string DeviceName { get; set; }

        /// <summary>
        /// The (ID, Name, or Source) of the DataItem that the Observation is associated with
        /// </summary>
        public string Key { get; set; }

        /// <summary>
        /// Level of the Condition (Normal, Warning, Fault, or Unavailable)
        /// </summary>
        public ConditionLevel Level { get; set; }

        /// <summary>
        /// The native code (usually an alpha-numeric value) generated by the controller of a piece of equipment providing a reference identifier for a condition state or alarm.
        /// This is the same information an operator or maintenance personnel would see as a reference code designating a specific type of Condition when viewed at the piece of equipment.Usually this reference code is used to point to a more detailed description of the Condition.
        /// </summary>
        public string NativeCode { get; set; }

        /// <summary>
        /// If the data source assigns a severity level to a Condition, nativeSeverity is used to report that severity information to a client software application.
        /// </summary>
        public string NativeSeverity { get; set; }

        /// <summary>
        /// Qualifies the Condition and adds context or additional clarification.
        /// This optional attribute can be used to convey information such as HIGH or LOW type Warning and Fault condition to indicate differing types of condition states
        /// </summary>
        public string Qualifier { get; set; }

        /// <summary>
        /// The CDATA of the Condition Observation
        /// </summary>
        public string Message { get; set; }

        /// <summary>
        /// The timestamp (UnixTime in Milliseconds) that the observation was recorded at
        /// </summary>
        public long Timestamp { get; set; }

        /// <summary>
        /// A MD5 Hash of the Observation that can be used for comparison
        /// </summary>
        public string ChangeId
        {
            get
            {
                return $"{Level}|{NativeCode}|{NativeSeverity}|{Qualifier}|{Message}";
            }
        }


        public ConditionObservation() { }

        public ConditionObservation(string key)
        {
            Key = key;
        }

        public ConditionObservation(string key, ConditionLevel level)
        {
            Key = key;
            Level = level;
        }

        public ConditionObservation(string key, ConditionLevel level, long timestamp)
        {
            Key = key;
            Level = level;
            Timestamp = timestamp;
        }

        public ConditionObservation(string key, ConditionLevel level, DateTime timestamp)
        {
            Key = key;
            Level = level;
            Timestamp = timestamp.ToUnixTime();
        }
    }
}
